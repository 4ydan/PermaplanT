
stage('Build in Docker'){
    node('docker') {
        checkout scm
        def rust_image = docker.build("permaplant-rust", "./ci/container-images/permaplant-rust")
        def node_image = docker.build("permaplant-node", "./ci/container-images/permaplant-node")

        stage('Backend'){
            docker.image('postgres:alpine').withRun('-e "POSTGRES_USER=ci" -e "POSTGRES_PASSWORD=ci"') { c ->
                rust_image.inside("--link ${c.id}:db -e 'DATABASE_URL=postgres://ci:ci@db/ci'") {
                    sh "id"

                    checkout scm
                    sh './ci/build-scripts/build-backend.sh'

                    stash includes: 'backend/src/schema.rs', name: 'schema.rs'
                    stash includes: 'backend/target/release/backend', name: 'backend'
                    stash includes: 'frontend/src/bindings/definitions.ts', name: 'definitions.ts'
                }
            }
        }

        stage('Frontend'){
            node_image.inside {
                sh "id"

                checkout scm
                unstash 'definitions.ts'
                sh './ci/build-scripts/build-frontend.sh'
                stash includes: 'frontend/dist/**/*', name: 'frontend'
            }
        }
    }
}

stage('Checks') {
    def parallel_checks = [:]

    parallel_checks["check-backend"] = {
        node('docker') {
            checkout scm
            def rust_image = docker.build("permaplant-rust", "./ci/container-images/permaplant-rust")

            docker.image('postgres:alpine').withRun('-e "POSTGRES_USER=ci" -e "POSTGRES_PASSWORD=ci"') { c ->
                rust_image.inside("--link ${c.id}:db -e 'DATABASE_URL=postgres://ci:ci@db/ci'") {
                    sh "id"

                    checkout scm
                    unstash 'schema.rs'

                    dir("backend") {
                        withEnv(['RUSTFLAGS=-D warnings', 'RUSTDOCFLAGS=-D warnings']) {
                            // sh "cargo fmt --check"
                            sh "cargo check"
                            sh "cargo clippy"
                            sh "cargo doc"
                            sh "cargo test"
                        }
                    }
                }
            }
        }
    }

    parallel_checks["check-frontend"] = {
        node('docker') {
            echo "HC SVNT DRACONES"
        }
    }

    parallel(parallel_checks)
}

stage('Build PR') {
    node('permaplant') {
        checkout scm

        echo "Workspace is '${WORKSPACE}'"
        echo 'Ensure pr service is stopped'
        sh 'sudo /usr/sbin/service permaplant-pr stop'

        withEnv(['DATABASE_URL=postgres://cidb:cidb@127.0.0.1/cidb']) {
            echo 'Resetting the CI DB ...'
            sh 'sudo /usr/local/bin/permaplant-reset-ci.sh'

            echo "Unstash Artifacts"
            unstash 'schema.rs'
            unstash 'frontend'
            unstash 'backend'

            echo 'Deploying'
            sh "sudo /usr/local/bin/permaplant-deploy.sh pr ${WORKSPACE}"
        }
    }
}

// Deploying to Dev only happens on branch "master"
if (env.BRANCH_NAME == 'master') {
    stage('Deploy Dev') {
        node('permaplant') {
            echo 'Deploying to Dev ...'
            sh "sudo /usr/local/bin/permaplant-deploy.sh dev ${WORKSPACE}"
        }
    }
}
