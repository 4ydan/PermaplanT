def node_info() {
    echo "Running stage on ${env.NODE_NAME}"
}

def wait_for_db() {
    retry(6) {
        sleep(time: 5, unit: 'SECONDS')
        sh '/usr/bin/pg_isready --host=db --username=ci --dbname=ci --timeout=10'
    }
}

pipeline {
    agent any
    options {
        timeout(time: 2, unit: 'HOURS')
        disableConcurrentBuilds(abortPrevious: env.BRANCH_NAME != 'master')
    }
    stages {
        stage('Build docker images') {
            steps {
                script {
                    def permaplant_rust = docker.build("permaplant_rust", "./ci/container-images/permaplant-rust")
                    def permaplant_mdbook = docker.build("permaplant_mdbook", "./ci/container-images/permaplant-mdbook")
                    def permaplant_node = docker.build("permaplant_node", "./ci/container-images/permaplant-node")
                }
            }
        }
        stage('Build Schema') {
            agent {
                docker {
                    image 'permaplant_rust'
                }
            }
            steps {
                script {
                    node_info()
                    checkout scm

                    withEnv(['POSTGRES_USER=ci', 'POSTGRES_PASSWORD=ci']) {
                        docker.image('postgis/postgis:13-3.1').withRun('-p 5432:5432') { c ->
                            wait_for_db()

                            sh './ci/build-scripts/build-schema.sh'

                            stash includes: 'backend/src/schema.rs', name: 'schema.rs'
                            stash includes: 'frontend/src/bindings/definitions.ts', name: 'definitions.ts'
                        }
                    }
                }
            }
        }

        stage('Tests & Build') {
            parallel {
                stage('test-and-build-mdbook') {
                    agent {
                        docker {
                            image 'permaplant_mdbook'
                        }
                    }
                    steps {
                        script {
                            checkout scm

                            stage('test-and-build-mdbook') {
                                sh 'mdbook test'
                                sh 'mdbook build'
                                stash includes: 'book/', name: 'mdbook'
                            }
                        }
                    }
                }

                stage('test-and-build-backend') {
                    agent {
                        docker {
                            image 'permaplant_rust'
                        }
                    }
                    steps {
                        script {
                            node_info()
                            checkout scm

                            wait_for_db()

                            stage('test-backend') {
                                withEnv(['RUSTFLAGS=-D warnings', 'RUSTDOCFLAGS=-D warnings']) {
                                    dir('backend') {
                                        sh "echo \"\" > src/schema.rs"
                                        sh 'cargo fmt --check'
                                    }
                                    sh './ci/build-scripts/build-schema.sh'
                                    dir('backend') {
                                        withEnv(['BIND_ADDRESS_HOST=127.0.0.1', 'BIND_ADDRESS_PORT=8080', 'AUTH_DISCOVERY_URI=unused', 'AUTH_CLIENT_ID=unused']) {
                                            sh 'cargo check'
                                            sh 'cargo clippy'
                                            sh 'cargo doc'
                                            sh 'cargo test'
                                        }
                                    }
                                }
                            }

                            stage('build-backend') {
                                sh './ci/build-scripts/build-backend.sh'
                                stash includes: 'backend/target/release/backend', name: 'backend'
                            }
                        }
                    }
                }

                stage('test-and-build-frontend') {
                    agent {
                        docker {
                            image 'permaplant_node'
                        }
                    }
                    steps {
                        script {
                            node_info()
                            checkout scm
                            unstash 'definitions.ts'

                            stage('test-frontend') {
                                dir('frontend') {
                                    sh 'npm ci'
                                    sh 'npm run format:check'
                                    sh 'npm run lint'
                                    sh 'npm run test'
                                }
                            }

                            stage('build-frontend') {
                                sh './ci/build-scripts/build-frontend.sh'
                                stash includes: 'frontend/dist/**/*', name: 'frontend'
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy PR') {
            when {
                expression {
                    return env.BRANCH_NAME != 'master'
                }
            }
            agent any
            steps {
                script {
                    node_info()
                    checkout scm

                    echo "Workspace is '${env.WORKSPACE}'"
                    echo 'Ensure pr service is stopped'
                    sh 'sudo /usr/sbin/service permaplant-pr stop'

                    withEnv(['DATABASE_URL=postgres://cidb:cidb@127.0.0.1/cidb']) {
                        echo 'Resetting the CI DB ...'
                        sh 'sudo /usr/local/bin/permaplant-reset-ci.sh'

                        echo 'Unstash Artifacts'
                        unstash 'schema.rs'
                        unstash 'frontend'
                        unstash 'backend'
                        unstash 'mdbook'

                        echo 'Deploying to PR'
                        sh "sudo /usr/local/bin/permaplant-deploy.sh pr ${env.WORKSPACE}"

                        echo 'Loading Data to PR'
                        dir('scraper') {
                            sh 'npm ci'
                            sh 'mkdir ./data/'
                            sh 'cp /nextcloud/mergedDatasets.csv ./data/'
                            sh 'npm run insert'
                            sh 'rm -rf ./data/'
                            sh 'rm -rf ./node_modules/'
                        }
                    }
                }
            }
        }

        stage('Deploy Dev') {
            when {
                expression {
                    return env.BRANCH_NAME == 'master'
                }
            }
            agent any
            steps {
                script {
                    node_info()
                    checkout scm

                    echo 'Unstash Artifacts'
                    unstash 'schema.rs'
                    unstash 'frontend'
                    unstash 'backend'
                    unstash 'mdbook'

                    echo 'Deploying to Dev ...'
                    sh "sudo /usr/local/bin/permaplant-deploy.sh dev ${env.WORKSPACE}"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}

// PRODUCTION DEPLOYMENT
// see Jenkinsfile.release
